openapi: 3.0.0
info:
  version: 1.0.0
  title: Spring Boot with OpenAPI
  description: Example project with java, Maven, Spring Boot, JUnit, Docker and OpenAPI 3.0 specification.
  contact:
    name: Aymen Naghmouchi
    email: aymenadvance@gmail.com
    url: http://aymen94.github.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /users:
    get:
      description: Get All users
      operationId: get all users
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new user in the DB. Duplicates are allowed
      operationId: addUser
      requestBody:
        description: User to add to the DB
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      description: Returns a user based on a single ID
      operationId: find user by id
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single user based on the ID supplied
      operationId: delete user by id
      parameters:
        - name: id
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: user deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:

    UserDTO:
      allOf:
        - $ref: '#/components/schemas/NewUser'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64

    NewUser:
      type: object
      required:
        - name
        - lastName
      properties:
        name:
          type: string
        lastName:
          type: string
        gender:
          type: string
        dateOfBirth:
          type: string
          format: date

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string